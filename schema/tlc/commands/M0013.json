{
  "allOf" : [
    {
      "properties" : { 
        "description": "Activate a series of inputs<br>Requires security code 2",
        "n" : { "enum" : ["status", "securityCode"] },
        "cO" : { "const" : "setInput" }
      }
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "status" }}},
      "then" : { "properties" : {
        "v" : {
          "$description": "Sets/Unsets a block of 16 inputs at a time. Can be repeated to set several blocks of 16 inputs. Values are separated with comma. Blocks are separated with semicolon. Since semicolon breaks the SXL csv-format,  colon, ':' is used in example below.<br><br>Format: [Offset],[Bits to set],[Bits to unset]:â€¦<br> <br>Offset sets where the 16 inputs starts from followed by two 16 bit values telling which bit to set and unset in binary format, i.e. first bit have value 1 and last bit have value 32768. <br> <br>Example 1:<br>'5, 4134, 65' sets input 6,7,10,17 = on and 5,11 = off<br>(Input starts from no. 5 and bit 1,2,5,12 = 1 and bit 0,6 = 0)<br> <br>Example 2:<br>'22, 1, 4' sets input 22 = on and 24 = off<br>(Input starts from no. 22 and bit 0 = 1 and bit 2 = 0)<br> <br>And both thease examples could be sent in the same message as:<br>'5,4143:65:22,1,4'<br><br>Such a message would activate input 6,7,10,17,22 and deactive input 5,11,24",
          "type" : "string"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "securityCode" }}},
      "then" : { "properties" : {
        "v" : {
          "$description": "Security code 2",
          "type" : "string"
				}
      }}
    }
  ]
}
