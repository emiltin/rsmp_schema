{
  "allOf" : [
    { "properties" : { 
      "description": "Traffic Counting: Number of vehicles of given classification",
      "n" : { "enum" : ["start", "P", "PS", "L", "LS", "B", "SP", "MC", "C", "F"] }
    }},
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "start" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Time stamp for start of measuring. Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z",
          "$ref": "../../core/definitions.json#/timestamp"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "P" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of cars<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "PS" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of cars with trailers<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "L" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of trucks<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "LS" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of trucks with trailers<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "B" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of busses<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "SP" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of trams<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "MC" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of motor cycles<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "C" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of bicycles<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    },
    {
      "if" : { "required" : ["n"], "properties" : { "n" : { "const" : "F" }}},
      "then" : { "properties" : {
        "s" : {
          "$description": "Number of pedestrians<br> Value expressed as an integer with a range of 0-65535.<br> Contains data from all detector logics. Each detector logic is separated with a comma. <br> The value is set to “-1” if no data could be measured (e.g. detector fault)<br>",
          "$ref": "../../core/definitions.json#/integer_list"
				}
      }}
    }
  ]
}
