{
  "description" : "Signal group status.\nProvides the status of each signal group, including basic information such as green, yellow and red. But also detailed technical information.\nCan be used to draw a live signal group diagram as well provide diagnostic information about the performance of the controller.",
  "allOf" : [
    {
      "properties" : {
        "n" : {
          "enum" : [
            "basecyclecounter",
            "cyclecounter",
            "cyclecounter10",
            "signalgroupstatus",
            "stage"
          ]
        }
      }
    },
    {
      "if" : {
        "required" : [
          "q"
        ],
        "properties" : {
          "q" : {
            "const" : "undefined"
          }
        }
      },
      "then" : {
        "s" : {
          "type" : "null"
        }
      },
      "else" : {
        "allOf" : [
          {
            "if" : {
              "required" : [
                "n"
              ],
              "properties" : {
                "n" : {
                  "const" : "signalgroupstatus"
                }
              }
            },
            "then" : {
              "properties" : {
                "s" : {
                  "description" : "Signal group status as text field.\nEach character represent the state of the signal group in consecutive order,\nwhere the leftmost character starts with signal group 1.\nSignal group status is described in detail in the corresponding section.\n- : Signal group is undefined/does not exist",
                  "type" : "string",
                  "pattern" : "^[a-hA-G0-9N-P]*$"
                }
              }
            }
          },
          {
            "if" : {
              "required" : [
                "n"
              ],
              "properties" : {
                "n" : {
                  "const" : "cyclecounter"
                }
              }
            },
            "then" : {
              "properties" : {
                "s" : {
                  "allOf" : [
                    {
                      "description" : "Cycle counter.\nUsed for handling of coordination between TLCâ€™s.\nIs counted from 0 until it reaches the cycle time (See S0028).\n\nc = (b + o) mod t\n\nwhere c = cycle counter,\nb = base cycle counter,\no = offset,\nt = cycle time,\nmod = modulo\n\nSee the coordination section for more information."
                    },
                    {
                      "$ref" : "../../../core/3.1.2/definitions.json#/integer"
                    }
                  ]
                }
              }
            }
          },
          {
            "if" : {
              "required" : [
                "n"
              ],
              "properties" : {
                "n" : {
                  "const" : "cyclecounter10"
                }
              }
            },
            "then" : {
              "properties" : {
                "s" : {
                  "allOf" : [
                    {
                      "description" : "The same as cyclecounter, but in 10th of a second.\n\nThe cyclecounter must increase each time cyclecounter10 hits a whole second, eg. 0, 10, 20...\nIn other words, dividing cyclecounter10 while truncating to zero must equal cyclecounter.\n\nIf the internal cycle counter precision is 1 second, then cyclecounter10 will always equal cyclecounter.\n\nThe cyclecounter10 attribute is metadata and is updated only when other non-metadata attributes changes.\nFor example, if you subscribe to signalgroupstatus and cyclecounter10,\nyou will get an update whenever signal group status changes, not every 10th of a second."
                    },
                    {
                      "$ref" : "../../../core/3.1.2/definitions.json#/integer"
                    }
                  ]
                }
              }
            }
          },
          {
            "if" : {
              "required" : [
                "n"
              ],
              "properties" : {
                "n" : {
                  "const" : "basecyclecounter"
                }
              }
            },
            "then" : {
              "properties" : {
                "s" : {
                  "allOf" : [
                    {
                      "description" : "The same as basecyclecounter, but in 10th of a second.\n\nThe basecyclecounter must increase each time basecyclecounter10 hits a whole second, eg. 0, 10, 20...\nIn other words, dividing basecyclecounter10 while truncating to zero must equal basecyclecounter.\n\nIf the internal cycle counter precision is 1 second, then basecyclecounter10 will always equal basecyclecounter.\n\nThe basecyclecounter10 attribute is metadata and is updated only when other non-metadata attributes changes.\nFor example, if you subscribe to signalgroupstatus and basecyclecounter10,\nyou will get an update whenever signal group status changes, not every 10th of a second."
                    },
                    {
                      "$ref" : "../../../core/3.1.2/definitions.json#/integer"
                    }
                  ]
                }
              }
            }
          },
          {
            "if" : {
              "required" : [
                "n"
              ],
              "properties" : {
                "n" : {
                  "const" : "stage"
                }
              }
            },
            "then" : {
              "properties" : {
                "s" : {
                  "allOf" : [
                    {
                      "description" : "Current stage (isolated)"
                    },
                    {
                      "$ref" : "../../../core/3.1.2/definitions.json#/integer"
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    }
  ]
}
